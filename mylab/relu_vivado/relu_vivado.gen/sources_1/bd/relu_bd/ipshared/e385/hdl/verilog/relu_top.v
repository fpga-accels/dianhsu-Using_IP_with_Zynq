// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="relu_top_relu_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1636,HLS_SYN_LUT=1997,HLS_VERSION=2020_2}" *)

module relu_top (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_din_AWVALID,
        m_axi_din_AWREADY,
        m_axi_din_AWADDR,
        m_axi_din_AWID,
        m_axi_din_AWLEN,
        m_axi_din_AWSIZE,
        m_axi_din_AWBURST,
        m_axi_din_AWLOCK,
        m_axi_din_AWCACHE,
        m_axi_din_AWPROT,
        m_axi_din_AWQOS,
        m_axi_din_AWREGION,
        m_axi_din_AWUSER,
        m_axi_din_WVALID,
        m_axi_din_WREADY,
        m_axi_din_WDATA,
        m_axi_din_WSTRB,
        m_axi_din_WLAST,
        m_axi_din_WID,
        m_axi_din_WUSER,
        m_axi_din_ARVALID,
        m_axi_din_ARREADY,
        m_axi_din_ARADDR,
        m_axi_din_ARID,
        m_axi_din_ARLEN,
        m_axi_din_ARSIZE,
        m_axi_din_ARBURST,
        m_axi_din_ARLOCK,
        m_axi_din_ARCACHE,
        m_axi_din_ARPROT,
        m_axi_din_ARQOS,
        m_axi_din_ARREGION,
        m_axi_din_ARUSER,
        m_axi_din_RVALID,
        m_axi_din_RREADY,
        m_axi_din_RDATA,
        m_axi_din_RLAST,
        m_axi_din_RID,
        m_axi_din_RUSER,
        m_axi_din_RRESP,
        m_axi_din_BVALID,
        m_axi_din_BREADY,
        m_axi_din_BRESP,
        m_axi_din_BID,
        m_axi_din_BUSER,
        m_axi_dout_AWVALID,
        m_axi_dout_AWREADY,
        m_axi_dout_AWADDR,
        m_axi_dout_AWID,
        m_axi_dout_AWLEN,
        m_axi_dout_AWSIZE,
        m_axi_dout_AWBURST,
        m_axi_dout_AWLOCK,
        m_axi_dout_AWCACHE,
        m_axi_dout_AWPROT,
        m_axi_dout_AWQOS,
        m_axi_dout_AWREGION,
        m_axi_dout_AWUSER,
        m_axi_dout_WVALID,
        m_axi_dout_WREADY,
        m_axi_dout_WDATA,
        m_axi_dout_WSTRB,
        m_axi_dout_WLAST,
        m_axi_dout_WID,
        m_axi_dout_WUSER,
        m_axi_dout_ARVALID,
        m_axi_dout_ARREADY,
        m_axi_dout_ARADDR,
        m_axi_dout_ARID,
        m_axi_dout_ARLEN,
        m_axi_dout_ARSIZE,
        m_axi_dout_ARBURST,
        m_axi_dout_ARLOCK,
        m_axi_dout_ARCACHE,
        m_axi_dout_ARPROT,
        m_axi_dout_ARQOS,
        m_axi_dout_ARREGION,
        m_axi_dout_ARUSER,
        m_axi_dout_RVALID,
        m_axi_dout_RREADY,
        m_axi_dout_RDATA,
        m_axi_dout_RLAST,
        m_axi_dout_RID,
        m_axi_dout_RUSER,
        m_axi_dout_RRESP,
        m_axi_dout_BVALID,
        m_axi_dout_BREADY,
        m_axi_dout_BRESP,
        m_axi_dout_BID,
        m_axi_dout_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_pp0_stage0 = 14'd256;
parameter    ap_ST_fsm_state14 = 14'd512;
parameter    ap_ST_fsm_state15 = 14'd1024;
parameter    ap_ST_fsm_state16 = 14'd2048;
parameter    ap_ST_fsm_state17 = 14'd4096;
parameter    ap_ST_fsm_state18 = 14'd8192;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DIN_ID_WIDTH = 1;
parameter    C_M_AXI_DIN_ADDR_WIDTH = 64;
parameter    C_M_AXI_DIN_DATA_WIDTH = 64;
parameter    C_M_AXI_DIN_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DIN_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DIN_WUSER_WIDTH = 1;
parameter    C_M_AXI_DIN_RUSER_WIDTH = 1;
parameter    C_M_AXI_DIN_BUSER_WIDTH = 1;
parameter    C_M_AXI_DIN_TARGET_ADDR = 0;
parameter    C_M_AXI_DIN_USER_VALUE = 0;
parameter    C_M_AXI_DIN_PROT_VALUE = 0;
parameter    C_M_AXI_DIN_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DOUT_ID_WIDTH = 1;
parameter    C_M_AXI_DOUT_ADDR_WIDTH = 64;
parameter    C_M_AXI_DOUT_DATA_WIDTH = 64;
parameter    C_M_AXI_DOUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DOUT_TARGET_ADDR = 0;
parameter    C_M_AXI_DOUT_USER_VALUE = 0;
parameter    C_M_AXI_DOUT_PROT_VALUE = 0;
parameter    C_M_AXI_DOUT_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DIN_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DOUT_WSTRB_WIDTH = (64 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_din_AWVALID;
input   m_axi_din_AWREADY;
output  [C_M_AXI_DIN_ADDR_WIDTH - 1:0] m_axi_din_AWADDR;
output  [C_M_AXI_DIN_ID_WIDTH - 1:0] m_axi_din_AWID;
output  [7:0] m_axi_din_AWLEN;
output  [2:0] m_axi_din_AWSIZE;
output  [1:0] m_axi_din_AWBURST;
output  [1:0] m_axi_din_AWLOCK;
output  [3:0] m_axi_din_AWCACHE;
output  [2:0] m_axi_din_AWPROT;
output  [3:0] m_axi_din_AWQOS;
output  [3:0] m_axi_din_AWREGION;
output  [C_M_AXI_DIN_AWUSER_WIDTH - 1:0] m_axi_din_AWUSER;
output   m_axi_din_WVALID;
input   m_axi_din_WREADY;
output  [C_M_AXI_DIN_DATA_WIDTH - 1:0] m_axi_din_WDATA;
output  [C_M_AXI_DIN_WSTRB_WIDTH - 1:0] m_axi_din_WSTRB;
output   m_axi_din_WLAST;
output  [C_M_AXI_DIN_ID_WIDTH - 1:0] m_axi_din_WID;
output  [C_M_AXI_DIN_WUSER_WIDTH - 1:0] m_axi_din_WUSER;
output   m_axi_din_ARVALID;
input   m_axi_din_ARREADY;
output  [C_M_AXI_DIN_ADDR_WIDTH - 1:0] m_axi_din_ARADDR;
output  [C_M_AXI_DIN_ID_WIDTH - 1:0] m_axi_din_ARID;
output  [7:0] m_axi_din_ARLEN;
output  [2:0] m_axi_din_ARSIZE;
output  [1:0] m_axi_din_ARBURST;
output  [1:0] m_axi_din_ARLOCK;
output  [3:0] m_axi_din_ARCACHE;
output  [2:0] m_axi_din_ARPROT;
output  [3:0] m_axi_din_ARQOS;
output  [3:0] m_axi_din_ARREGION;
output  [C_M_AXI_DIN_ARUSER_WIDTH - 1:0] m_axi_din_ARUSER;
input   m_axi_din_RVALID;
output   m_axi_din_RREADY;
input  [C_M_AXI_DIN_DATA_WIDTH - 1:0] m_axi_din_RDATA;
input   m_axi_din_RLAST;
input  [C_M_AXI_DIN_ID_WIDTH - 1:0] m_axi_din_RID;
input  [C_M_AXI_DIN_RUSER_WIDTH - 1:0] m_axi_din_RUSER;
input  [1:0] m_axi_din_RRESP;
input   m_axi_din_BVALID;
output   m_axi_din_BREADY;
input  [1:0] m_axi_din_BRESP;
input  [C_M_AXI_DIN_ID_WIDTH - 1:0] m_axi_din_BID;
input  [C_M_AXI_DIN_BUSER_WIDTH - 1:0] m_axi_din_BUSER;
output   m_axi_dout_AWVALID;
input   m_axi_dout_AWREADY;
output  [C_M_AXI_DOUT_ADDR_WIDTH - 1:0] m_axi_dout_AWADDR;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_dout_AWID;
output  [7:0] m_axi_dout_AWLEN;
output  [2:0] m_axi_dout_AWSIZE;
output  [1:0] m_axi_dout_AWBURST;
output  [1:0] m_axi_dout_AWLOCK;
output  [3:0] m_axi_dout_AWCACHE;
output  [2:0] m_axi_dout_AWPROT;
output  [3:0] m_axi_dout_AWQOS;
output  [3:0] m_axi_dout_AWREGION;
output  [C_M_AXI_DOUT_AWUSER_WIDTH - 1:0] m_axi_dout_AWUSER;
output   m_axi_dout_WVALID;
input   m_axi_dout_WREADY;
output  [C_M_AXI_DOUT_DATA_WIDTH - 1:0] m_axi_dout_WDATA;
output  [C_M_AXI_DOUT_WSTRB_WIDTH - 1:0] m_axi_dout_WSTRB;
output   m_axi_dout_WLAST;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_dout_WID;
output  [C_M_AXI_DOUT_WUSER_WIDTH - 1:0] m_axi_dout_WUSER;
output   m_axi_dout_ARVALID;
input   m_axi_dout_ARREADY;
output  [C_M_AXI_DOUT_ADDR_WIDTH - 1:0] m_axi_dout_ARADDR;
output  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_dout_ARID;
output  [7:0] m_axi_dout_ARLEN;
output  [2:0] m_axi_dout_ARSIZE;
output  [1:0] m_axi_dout_ARBURST;
output  [1:0] m_axi_dout_ARLOCK;
output  [3:0] m_axi_dout_ARCACHE;
output  [2:0] m_axi_dout_ARPROT;
output  [3:0] m_axi_dout_ARQOS;
output  [3:0] m_axi_dout_ARREGION;
output  [C_M_AXI_DOUT_ARUSER_WIDTH - 1:0] m_axi_dout_ARUSER;
input   m_axi_dout_RVALID;
output   m_axi_dout_RREADY;
input  [C_M_AXI_DOUT_DATA_WIDTH - 1:0] m_axi_dout_RDATA;
input   m_axi_dout_RLAST;
input  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_dout_RID;
input  [C_M_AXI_DOUT_RUSER_WIDTH - 1:0] m_axi_dout_RUSER;
input  [1:0] m_axi_dout_RRESP;
input   m_axi_dout_BVALID;
output   m_axi_dout_BREADY;
input  [1:0] m_axi_dout_BRESP;
input  [C_M_AXI_DOUT_ID_WIDTH - 1:0] m_axi_dout_BID;
input  [C_M_AXI_DOUT_BUSER_WIDTH - 1:0] m_axi_dout_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] cnt;
reg    din_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    din_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln3_1_reg_224;
reg    dout_blk_n_AW;
reg    dout_blk_n_W;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln3_1_reg_224_pp0_iter3_reg;
reg    dout_blk_n_B;
wire    ap_CS_fsm_state18;
reg   [0:0] icmp_ln3_reg_210;
wire    din_AWREADY;
wire    din_WREADY;
reg    din_ARVALID;
wire    din_ARREADY;
wire    din_RVALID;
reg    din_RREADY;
wire   [63:0] din_RDATA;
wire    din_RLAST;
wire   [0:0] din_RID;
wire   [0:0] din_RUSER;
wire   [1:0] din_RRESP;
wire    din_BVALID;
wire   [1:0] din_BRESP;
wire   [0:0] din_BID;
wire   [0:0] din_BUSER;
reg    dout_AWVALID;
wire    dout_AWREADY;
reg    dout_WVALID;
wire    dout_WREADY;
wire    dout_ARREADY;
wire    dout_RVALID;
wire   [63:0] dout_RDATA;
wire    dout_RLAST;
wire   [0:0] dout_RID;
wire   [0:0] dout_RUSER;
wire   [1:0] dout_RRESP;
wire    dout_BVALID;
reg    dout_BREADY;
wire   [1:0] dout_BRESP;
wire   [0:0] dout_BID;
wire   [0:0] dout_BUSER;
reg   [30:0] i_reg_122;
reg   [31:0] cnt_read_reg_203;
wire   [0:0] icmp_ln3_fu_138_p2;
wire   [30:0] trunc_ln3_fu_144_p1;
reg   [30:0] trunc_ln3_reg_214;
wire   [30:0] add_ln3_fu_147_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln3_1_fu_153_p2;
reg   [0:0] icmp_ln3_1_reg_224_pp0_iter1_reg;
reg   [0:0] icmp_ln3_1_reg_224_pp0_iter2_reg;
reg   [63:0] din_read_reg_228;
reg   [63:0] din_read_reg_228_pp0_iter2_reg;
reg   [10:0] tmp_reg_234;
wire   [51:0] trunc_ln4_fu_168_p1;
reg   [51:0] trunc_ln4_reg_239;
wire   [0:0] icmp_ln4_fu_176_p2;
reg   [0:0] icmp_ln4_reg_249;
wire   [0:0] icmp_ln4_1_fu_181_p2;
reg   [0:0] icmp_ln4_1_reg_254;
wire   [63:0] select_ln4_fu_196_p3;
reg   [63:0] select_ln4_reg_259;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_state2_io;
reg    ap_block_state18;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] grp_fu_133_p0;
wire   [0:0] or_ln4_fu_186_p2;
wire   [0:0] grp_fu_133_p2;
wire   [0:0] and_ln4_fu_190_p2;
reg    grp_fu_133_ce;
reg    ap_block_pp0_stage0_00001;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

relu_top_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .cnt(cnt)
);

relu_top_din_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DIN_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DIN_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DIN_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DIN_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DIN_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DIN_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DIN_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DIN_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DIN_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DIN_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DIN_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DIN_CACHE_VALUE ))
din_m_axi_U(
    .AWVALID(m_axi_din_AWVALID),
    .AWREADY(m_axi_din_AWREADY),
    .AWADDR(m_axi_din_AWADDR),
    .AWID(m_axi_din_AWID),
    .AWLEN(m_axi_din_AWLEN),
    .AWSIZE(m_axi_din_AWSIZE),
    .AWBURST(m_axi_din_AWBURST),
    .AWLOCK(m_axi_din_AWLOCK),
    .AWCACHE(m_axi_din_AWCACHE),
    .AWPROT(m_axi_din_AWPROT),
    .AWQOS(m_axi_din_AWQOS),
    .AWREGION(m_axi_din_AWREGION),
    .AWUSER(m_axi_din_AWUSER),
    .WVALID(m_axi_din_WVALID),
    .WREADY(m_axi_din_WREADY),
    .WDATA(m_axi_din_WDATA),
    .WSTRB(m_axi_din_WSTRB),
    .WLAST(m_axi_din_WLAST),
    .WID(m_axi_din_WID),
    .WUSER(m_axi_din_WUSER),
    .ARVALID(m_axi_din_ARVALID),
    .ARREADY(m_axi_din_ARREADY),
    .ARADDR(m_axi_din_ARADDR),
    .ARID(m_axi_din_ARID),
    .ARLEN(m_axi_din_ARLEN),
    .ARSIZE(m_axi_din_ARSIZE),
    .ARBURST(m_axi_din_ARBURST),
    .ARLOCK(m_axi_din_ARLOCK),
    .ARCACHE(m_axi_din_ARCACHE),
    .ARPROT(m_axi_din_ARPROT),
    .ARQOS(m_axi_din_ARQOS),
    .ARREGION(m_axi_din_ARREGION),
    .ARUSER(m_axi_din_ARUSER),
    .RVALID(m_axi_din_RVALID),
    .RREADY(m_axi_din_RREADY),
    .RDATA(m_axi_din_RDATA),
    .RLAST(m_axi_din_RLAST),
    .RID(m_axi_din_RID),
    .RUSER(m_axi_din_RUSER),
    .RRESP(m_axi_din_RRESP),
    .BVALID(m_axi_din_BVALID),
    .BREADY(m_axi_din_BREADY),
    .BRESP(m_axi_din_BRESP),
    .BID(m_axi_din_BID),
    .BUSER(m_axi_din_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(din_ARVALID),
    .I_ARREADY(din_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(cnt_read_reg_203),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(din_RVALID),
    .I_RREADY(din_RREADY),
    .I_RDATA(din_RDATA),
    .I_RID(din_RID),
    .I_RUSER(din_RUSER),
    .I_RRESP(din_RRESP),
    .I_RLAST(din_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(din_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(din_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(din_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(din_BRESP),
    .I_BID(din_BID),
    .I_BUSER(din_BUSER)
);

relu_top_dout_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DOUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DOUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DOUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DOUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DOUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DOUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DOUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DOUT_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DOUT_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DOUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DOUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DOUT_CACHE_VALUE ))
dout_m_axi_U(
    .AWVALID(m_axi_dout_AWVALID),
    .AWREADY(m_axi_dout_AWREADY),
    .AWADDR(m_axi_dout_AWADDR),
    .AWID(m_axi_dout_AWID),
    .AWLEN(m_axi_dout_AWLEN),
    .AWSIZE(m_axi_dout_AWSIZE),
    .AWBURST(m_axi_dout_AWBURST),
    .AWLOCK(m_axi_dout_AWLOCK),
    .AWCACHE(m_axi_dout_AWCACHE),
    .AWPROT(m_axi_dout_AWPROT),
    .AWQOS(m_axi_dout_AWQOS),
    .AWREGION(m_axi_dout_AWREGION),
    .AWUSER(m_axi_dout_AWUSER),
    .WVALID(m_axi_dout_WVALID),
    .WREADY(m_axi_dout_WREADY),
    .WDATA(m_axi_dout_WDATA),
    .WSTRB(m_axi_dout_WSTRB),
    .WLAST(m_axi_dout_WLAST),
    .WID(m_axi_dout_WID),
    .WUSER(m_axi_dout_WUSER),
    .ARVALID(m_axi_dout_ARVALID),
    .ARREADY(m_axi_dout_ARREADY),
    .ARADDR(m_axi_dout_ARADDR),
    .ARID(m_axi_dout_ARID),
    .ARLEN(m_axi_dout_ARLEN),
    .ARSIZE(m_axi_dout_ARSIZE),
    .ARBURST(m_axi_dout_ARBURST),
    .ARLOCK(m_axi_dout_ARLOCK),
    .ARCACHE(m_axi_dout_ARCACHE),
    .ARPROT(m_axi_dout_ARPROT),
    .ARQOS(m_axi_dout_ARQOS),
    .ARREGION(m_axi_dout_ARREGION),
    .ARUSER(m_axi_dout_ARUSER),
    .RVALID(m_axi_dout_RVALID),
    .RREADY(m_axi_dout_RREADY),
    .RDATA(m_axi_dout_RDATA),
    .RLAST(m_axi_dout_RLAST),
    .RID(m_axi_dout_RID),
    .RUSER(m_axi_dout_RUSER),
    .RRESP(m_axi_dout_RRESP),
    .BVALID(m_axi_dout_BVALID),
    .BREADY(m_axi_dout_BREADY),
    .BRESP(m_axi_dout_BRESP),
    .BID(m_axi_dout_BID),
    .BUSER(m_axi_dout_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(dout_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(dout_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(dout_RDATA),
    .I_RID(dout_RID),
    .I_RUSER(dout_RUSER),
    .I_RRESP(dout_RRESP),
    .I_RLAST(dout_RLAST),
    .I_AWVALID(dout_AWVALID),
    .I_AWREADY(dout_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(cnt_read_reg_203),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(dout_WVALID),
    .I_WREADY(dout_WREADY),
    .I_WDATA(select_ln4_reg_259),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd255),
    .I_BVALID(dout_BVALID),
    .I_BREADY(dout_BREADY),
    .I_BRESP(dout_BRESP),
    .I_BID(dout_BID),
    .I_BUSER(dout_BUSER)
);

relu_top_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_133_p0),
    .din1(64'd0),
    .ce(grp_fu_133_ce),
    .opcode(5'd2),
    .dout(grp_fu_133_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3_1_fu_153_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_122 <= add_ln3_fu_147_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_122 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cnt_read_reg_203 <= cnt;
        icmp_ln3_reg_210 <= icmp_ln3_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3_1_reg_224 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        din_read_reg_228 <= din_RDATA;
        tmp_reg_234 <= {{din_RDATA[62:52]}};
        trunc_ln4_reg_239 <= trunc_ln4_fu_168_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        din_read_reg_228_pp0_iter2_reg <= din_read_reg_228;
        icmp_ln3_1_reg_224_pp0_iter2_reg <= icmp_ln3_1_reg_224_pp0_iter1_reg;
        icmp_ln3_1_reg_224_pp0_iter3_reg <= icmp_ln3_1_reg_224_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln3_1_reg_224 <= icmp_ln3_1_fu_153_p2;
        icmp_ln3_1_reg_224_pp0_iter1_reg <= icmp_ln3_1_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3_1_reg_224_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln4_1_reg_254 <= icmp_ln4_1_fu_181_p2;
        icmp_ln4_reg_249 <= icmp_ln4_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3_1_reg_224_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln4_reg_259 <= select_ln4_fu_196_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln3_reg_214 <= trunc_ln3_fu_144_p1;
    end
end

always @ (*) begin
    if ((icmp_ln3_1_fu_153_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((~((dout_BVALID == 1'b0) & (icmp_ln3_reg_210 == 1'd1)) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((dout_BVALID == 1'b0) & (icmp_ln3_reg_210 == 1'd1)) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        din_ARVALID = 1'b1;
    end else begin
        din_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3_1_reg_224 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        din_RREADY = 1'b1;
    end else begin
        din_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        din_blk_n_AR = m_axi_din_ARREADY;
    end else begin
        din_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3_1_reg_224 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        din_blk_n_R = m_axi_din_RVALID;
    end else begin
        din_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        dout_AWVALID = 1'b1;
    end else begin
        dout_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((dout_BVALID == 1'b0) & (icmp_ln3_reg_210 == 1'd1)) & (1'b1 == ap_CS_fsm_state18) & (icmp_ln3_reg_210 == 1'd1))) begin
        dout_BREADY = 1'b1;
    end else begin
        dout_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln3_1_reg_224_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dout_WVALID = 1'b1;
    end else begin
        dout_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dout_blk_n_AW = m_axi_dout_AWREADY;
    end else begin
        dout_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln3_reg_210 == 1'd1))) begin
        dout_blk_n_B = m_axi_dout_BVALID;
    end else begin
        dout_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln3_1_reg_224_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        dout_blk_n_W = m_axi_dout_WREADY;
    end else begin
        dout_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_133_ce = 1'b1;
    end else begin
        grp_fu_133_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln3_fu_138_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((icmp_ln3_fu_138_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln3_1_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln3_1_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if ((~((dout_BVALID == 1'b0) & (icmp_ln3_reg_210 == 1'd1)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln3_fu_147_p2 = (i_reg_122 + 31'd1);

assign and_ln4_fu_190_p2 = (or_ln4_fu_186_p2 & grp_fu_133_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((din_RVALID == 1'b0) & (icmp_ln3_1_reg_224 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((din_RVALID == 1'b0) & (icmp_ln3_1_reg_224 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((din_RVALID == 1'b0) & (icmp_ln3_1_reg_224 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((din_RVALID == 1'b0) & (icmp_ln3_1_reg_224 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((din_RVALID == 1'b0) & (icmp_ln3_1_reg_224 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((dout_WREADY == 1'b0) & (icmp_ln3_1_reg_224_pp0_iter3_reg == 1'd0));
end

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18 = ((dout_BVALID == 1'b0) & (icmp_ln3_reg_210 == 1'd1));
end

always @ (*) begin
    ap_block_state2_io = ((dout_AWREADY == 1'b0) | (din_ARREADY == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_133_p0 = din_read_reg_228;

assign icmp_ln3_1_fu_153_p2 = ((i_reg_122 == trunc_ln3_reg_214) ? 1'b1 : 1'b0);

assign icmp_ln3_fu_138_p2 = (($signed(cnt) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln4_1_fu_181_p2 = ((trunc_ln4_reg_239 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_176_p2 = ((tmp_reg_234 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln4_fu_186_p2 = (icmp_ln4_reg_249 | icmp_ln4_1_reg_254);

assign select_ln4_fu_196_p3 = ((and_ln4_fu_190_p2[0:0] == 1'b1) ? din_read_reg_228_pp0_iter2_reg : 64'd0);

assign trunc_ln3_fu_144_p1 = cnt_read_reg_203[30:0];

assign trunc_ln4_fu_168_p1 = din_RDATA[51:0];

endmodule //relu_top
