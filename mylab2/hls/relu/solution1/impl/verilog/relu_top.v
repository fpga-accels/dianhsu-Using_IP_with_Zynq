// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="relu_top_relu_top,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=82,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1337,HLS_SYN_LUT=1750,HLS_VERSION=2020_2}" *)

module relu_top (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state20 = 10'd512;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] din;
wire   [63:0] dout;
wire   [31:0] positive_r_i;
reg   [31:0] positive_r_o;
reg    positive_r_o_ap_vld;
wire   [31:0] negative_i;
reg   [31:0] negative_o;
reg    negative_o_ap_vld;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln5_reg_449;
reg    gmem_blk_n_AW;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] and_ln7_reg_504;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] and_ln7_reg_504_pp0_iter4_reg;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] and_ln7_reg_504_pp0_iter9_reg;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [6:0] indvar_flatten_reg_205;
reg   [3:0] i_reg_216;
reg   [3:0] j_reg_227;
reg   [63:0] dout_read_reg_433;
reg   [63:0] gmem_addr_reg_438;
wire   [6:0] add_ln5_fu_272_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
reg    ap_block_state13_io;
wire    ap_block_state14_pp0_stage0_iter5;
reg    ap_block_state14_io;
wire    ap_block_state15_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state18_pp0_stage0_iter9;
reg    ap_block_state19_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln5_fu_278_p2;
reg   [0:0] icmp_ln5_reg_449_pp0_iter1_reg;
reg   [0:0] icmp_ln5_reg_449_pp0_iter2_reg;
reg   [31:0] gmem_addr_read_reg_453;
reg   [31:0] gmem_addr_read_reg_453_pp0_iter2_reg;
reg   [31:0] gmem_addr_read_reg_453_pp0_iter3_reg;
reg   [31:0] gmem_addr_read_reg_453_pp0_iter4_reg;
reg   [7:0] tmp_1_reg_459;
wire   [22:0] trunc_ln7_fu_294_p1;
reg   [22:0] trunc_ln7_reg_464;
wire   [3:0] select_ln5_1_fu_318_p3;
reg   [3:0] select_ln5_1_reg_469;
reg    ap_enable_reg_pp0_iter2;
wire   [2:0] trunc_ln5_1_fu_326_p1;
reg   [2:0] trunc_ln5_1_reg_474;
wire   [0:0] icmp_ln7_fu_334_p2;
reg   [0:0] icmp_ln7_reg_484;
wire   [0:0] icmp_ln7_1_fu_339_p2;
reg   [0:0] icmp_ln7_1_reg_489;
wire   [2:0] trunc_ln12_fu_344_p1;
reg   [2:0] trunc_ln12_reg_494;
wire   [3:0] add_ln6_fu_348_p2;
wire   [0:0] and_ln7_fu_369_p2;
reg   [0:0] and_ln7_reg_504_pp0_iter5_reg;
reg   [0:0] and_ln7_reg_504_pp0_iter6_reg;
reg   [0:0] and_ln7_reg_504_pp0_iter7_reg;
reg   [0:0] and_ln7_reg_504_pp0_iter8_reg;
wire   [63:0] add_ln12_1_fu_391_p2;
reg   [63:0] add_ln12_1_reg_508;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter3;
reg    ap_condition_pp0_exit_iter2_state11;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg   [3:0] ap_phi_mux_i_phi_fu_220_p4;
wire  signed [63:0] sext_ln5_fu_262_p1;
wire  signed [63:0] sext_ln12_fu_397_p1;
wire  signed [63:0] sext_ln9_fu_408_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] add_ln11_fu_419_p2;
wire   [31:0] add_ln8_fu_426_p2;
wire   [31:0] grp_fu_238_p0;
wire   [61:0] trunc_ln5_fu_252_p4;
wire   [0:0] icmp_ln6_fu_298_p2;
wire   [3:0] add_ln5_1_fu_312_p2;
wire   [3:0] select_ln5_fu_304_p3;
wire   [7:0] zext_ln6_mid2_v_fu_354_p3;
wire   [0:0] or_ln7_fu_365_p2;
wire   [0:0] grp_fu_238_p2;
wire   [4:0] shl_ln_fu_375_p3;
wire   [63:0] zext_ln12_fu_382_p1;
wire   [63:0] add_ln12_fu_386_p2;
wire   [63:0] zext_ln5_fu_361_p1;
wire   [61:0] grp_fu_243_p4;
reg    grp_fu_238_ce;
reg    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state20;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

relu_top_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .din(din),
    .dout(dout),
    .positive_r_o(positive_r_o),
    .positive_r_o_ap_vld(positive_r_o_ap_vld),
    .positive_r_i(positive_r_i),
    .negative_o(negative_o),
    .negative_o_ap_vld(negative_o_ap_vld),
    .negative_i(negative_i),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

relu_top_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_reg_438),
    .I_ARID(1'd0),
    .I_ARLEN(32'd64),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

relu_top_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_238_p0),
    .din1(32'd0),
    .ce(grp_fu_238_ce),
    .opcode(5'd2),
    .dout(grp_fu_238_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter2_state11)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln5_reg_449_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_216 <= select_ln5_1_reg_469;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_216 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_278_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_205 <= add_ln5_fu_272_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_205 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln5_reg_449_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_227 <= add_ln6_fu_348_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_227 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_449_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln12_1_reg_508 <= add_ln12_1_fu_391_p2;
        and_ln7_reg_504 <= and_ln7_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln7_reg_504_pp0_iter4_reg <= and_ln7_reg_504;
        and_ln7_reg_504_pp0_iter5_reg <= and_ln7_reg_504_pp0_iter4_reg;
        and_ln7_reg_504_pp0_iter6_reg <= and_ln7_reg_504_pp0_iter5_reg;
        and_ln7_reg_504_pp0_iter7_reg <= and_ln7_reg_504_pp0_iter6_reg;
        and_ln7_reg_504_pp0_iter8_reg <= and_ln7_reg_504_pp0_iter7_reg;
        and_ln7_reg_504_pp0_iter9_reg <= and_ln7_reg_504_pp0_iter8_reg;
        gmem_addr_read_reg_453_pp0_iter2_reg <= gmem_addr_read_reg_453;
        gmem_addr_read_reg_453_pp0_iter3_reg <= gmem_addr_read_reg_453_pp0_iter2_reg;
        gmem_addr_read_reg_453_pp0_iter4_reg <= gmem_addr_read_reg_453_pp0_iter3_reg;
        icmp_ln5_reg_449_pp0_iter2_reg <= icmp_ln5_reg_449_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dout_read_reg_433 <= dout;
        gmem_addr_reg_438 <= sext_ln5_fu_262_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln5_reg_449 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_453 <= gmem_RDATA;
        tmp_1_reg_459 <= {{gmem_RDATA[30:23]}};
        trunc_ln7_reg_464 <= trunc_ln7_fu_294_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln5_reg_449 <= icmp_ln5_fu_278_p2;
        icmp_ln5_reg_449_pp0_iter1_reg <= icmp_ln5_reg_449;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_449_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln7_1_reg_489 <= icmp_ln7_1_fu_339_p2;
        icmp_ln7_reg_484 <= icmp_ln7_fu_334_p2;
        trunc_ln12_reg_494 <= trunc_ln12_fu_344_p1;
        trunc_ln5_1_reg_474 <= trunc_ln5_1_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln5_reg_449_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln5_1_reg_469 <= select_ln5_1_fu_318_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln5_reg_449_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_220_p4 = select_ln5_1_reg_469;
    end else begin
        ap_phi_mux_i_phi_fu_220_p4 = i_reg_216;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((1'd1 == and_ln7_reg_504)) begin
            gmem_AWADDR = sext_ln9_fu_408_p1;
        end else if ((1'd0 == and_ln7_reg_504)) begin
            gmem_AWADDR = sext_ln12_fu_397_p1;
        end else begin
            gmem_AWADDR = 'bx;
        end
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln7_reg_504) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'd0 == and_ln7_reg_504) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter10 == 1'b1) & (1'd0 == and_ln7_reg_504_pp0_iter9_reg) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'd1 == and_ln7_reg_504_pp0_iter9_reg) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln5_reg_449 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((1'd1 == and_ln7_reg_504_pp0_iter4_reg)) begin
            gmem_WDATA = gmem_addr_read_reg_453_pp0_iter4_reg;
        end else if ((1'd0 == and_ln7_reg_504_pp0_iter4_reg)) begin
            gmem_WDATA = 32'd0;
        end else begin
            gmem_WDATA = 'bx;
        end
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'd0 == and_ln7_reg_504_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'd1 == and_ln7_reg_504_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln7_reg_504) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'd0 == and_ln7_reg_504) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter10 == 1'b1) & (1'd0 == and_ln7_reg_504_pp0_iter9_reg) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'd1 == and_ln7_reg_504_pp0_iter9_reg) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln5_reg_449 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'd0 == and_ln7_reg_504_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'd1 == and_ln7_reg_504_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_238_ce = 1'b1;
    end else begin
        grp_fu_238_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'd0 == and_ln7_reg_504_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        negative_o = add_ln11_fu_419_p2;
    end else begin
        negative_o = negative_i;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'd0 == and_ln7_reg_504_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        negative_o_ap_vld = 1'b1;
    end else begin
        negative_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'd1 == and_ln7_reg_504_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        positive_r_o = add_ln8_fu_426_p2;
    end else begin
        positive_r_o = positive_r_i;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'd1 == and_ln7_reg_504_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        positive_r_o_ap_vld = 1'b1;
    end else begin
        positive_r_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_419_p2 = (negative_i + 32'd1);

assign add_ln12_1_fu_391_p2 = (add_ln12_fu_386_p2 + zext_ln5_fu_361_p1);

assign add_ln12_fu_386_p2 = (zext_ln12_fu_382_p1 + dout_read_reg_433);

assign add_ln5_1_fu_312_p2 = (ap_phi_mux_i_phi_fu_220_p4 + 4'd1);

assign add_ln5_fu_272_p2 = (indvar_flatten_reg_205 + 7'd1);

assign add_ln6_fu_348_p2 = (select_ln5_fu_304_p3 + 4'd1);

assign add_ln8_fu_426_p2 = (positive_r_i + 32'd1);

assign and_ln7_fu_369_p2 = (or_ln7_fu_365_p2 & grp_fu_238_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((gmem_RVALID == 1'b0) & (icmp_ln5_reg_449 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((gmem_BVALID == 1'b0) & (1'd0 == and_ln7_reg_504_pp0_iter9_reg)) | ((gmem_BVALID == 1'b0) & (1'd1 == and_ln7_reg_504_pp0_iter9_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((gmem_RVALID == 1'b0) & (icmp_ln5_reg_449 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((gmem_BVALID == 1'b0) & (1'd0 == and_ln7_reg_504_pp0_iter9_reg)) | ((gmem_BVALID == 1'b0) & (1'd1 == and_ln7_reg_504_pp0_iter9_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((gmem_RVALID == 1'b0) & (icmp_ln5_reg_449 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((gmem_BVALID == 1'b0) & (1'd0 == and_ln7_reg_504_pp0_iter9_reg)) | ((gmem_BVALID == 1'b0) & (1'd1 == and_ln7_reg_504_pp0_iter9_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state14_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((gmem_RVALID == 1'b0) & (icmp_ln5_reg_449 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((gmem_BVALID == 1'b0) & (1'd0 == and_ln7_reg_504_pp0_iter9_reg)) | ((gmem_BVALID == 1'b0) & (1'd1 == and_ln7_reg_504_pp0_iter9_reg)))));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln5_reg_449 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = (((gmem_AWREADY == 1'b0) & (1'd0 == and_ln7_reg_504)) | ((gmem_AWREADY == 1'b0) & (1'd1 == and_ln7_reg_504)));
end

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = (((gmem_WREADY == 1'b0) & (1'd0 == and_ln7_reg_504_pp0_iter4_reg)) | ((gmem_WREADY == 1'b0) & (1'd1 == and_ln7_reg_504_pp0_iter4_reg)));
end

assign ap_block_state14_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter10 = (((gmem_BVALID == 1'b0) & (1'd0 == and_ln7_reg_504_pp0_iter9_reg)) | ((gmem_BVALID == 1'b0) & (1'd1 == and_ln7_reg_504_pp0_iter9_reg)));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_238_p0 = gmem_addr_read_reg_453;

assign grp_fu_243_p4 = {{add_ln12_1_reg_508[63:2]}};

assign icmp_ln5_fu_278_p2 = ((indvar_flatten_reg_205 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_298_p2 = ((j_reg_227 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln7_1_fu_339_p2 = ((trunc_ln7_reg_464 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_334_p2 = ((tmp_1_reg_459 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln7_fu_365_p2 = (icmp_ln7_reg_484 | icmp_ln7_1_reg_489);

assign select_ln5_1_fu_318_p3 = ((icmp_ln6_fu_298_p2[0:0] == 1'b1) ? add_ln5_1_fu_312_p2 : ap_phi_mux_i_phi_fu_220_p4);

assign select_ln5_fu_304_p3 = ((icmp_ln6_fu_298_p2[0:0] == 1'b1) ? 4'd0 : j_reg_227);

assign sext_ln12_fu_397_p1 = $signed(grp_fu_243_p4);

assign sext_ln5_fu_262_p1 = $signed(trunc_ln5_fu_252_p4);

assign sext_ln9_fu_408_p1 = $signed(grp_fu_243_p4);

assign shl_ln_fu_375_p3 = {{trunc_ln12_reg_494}, {2'd0}};

assign trunc_ln12_fu_344_p1 = select_ln5_fu_304_p3[2:0];

assign trunc_ln5_1_fu_326_p1 = select_ln5_1_fu_318_p3[2:0];

assign trunc_ln5_fu_252_p4 = {{din[63:2]}};

assign trunc_ln7_fu_294_p1 = gmem_RDATA[22:0];

assign zext_ln12_fu_382_p1 = shl_ln_fu_375_p3;

assign zext_ln5_fu_361_p1 = zext_ln6_mid2_v_fu_354_p3;

assign zext_ln6_mid2_v_fu_354_p3 = {{trunc_ln5_1_reg_474}, {5'd0}};

endmodule //relu_top
